type: component

meta:
  desc: Componente usado para board de colunas.

props:
  column-id-key:
    desc: chave que será o id usado para ser o identificador da coluna.
    type: String
    required: true

  column-params:
    desc: parâmetros customizados caso precise passar para as APIs das colunas.
    type: Object
    default: {}

  column-url:
    desc: URL usada para as APIs das colunas.
    type: String
    required: true

  column-width:
    desc: Largura da coluna
    type: String
    default: 288

  confirm-dialog-props:
    desc: Propriedade repassada ao `QasDialog` para confirmar um drag and drop. Caso não seja passado, não é usado dialog de confirmacao. As acoes de confirmar e cancelar sao feitas por padrao no componente.
    type: Object
    default: {}

  header-box-props:
    desc: Propriedades repassadas ao `QasBox` do header.
    type: Object
    default: {}

  headers:
    desc: Lista de itens sendo cada um o header de cada coluna.
    default: []
    type: Array

  height:
    desc: Altura do container do board. Caso não seja passado um height, o calculo é feito para ocupar a maior altura possível da página.
    type: String

  item-id-key:
    desc: Identificador unico do item a ser movido, sendo que sera usado nas requisicoes realizadas pelo drop.
    type: String

  lazy-loading-fields-keys:
    desc: Chaves dos campos que são lazy loading para o tratamento de merge das options.
    type: Array
    default: []

  limit:
    desc: Quantidade de itens da coluna por busca na API.
    type: Number
    default: 12

  use-mark-raw:
    desc: Define se os valores dos itens das colunas irá ser atribuido utilizando o "markRaw", onde somente a primeira camada do model será reativa.(https://vuejs.org/api/reactivity-advanced.html#markraw)
    type: Boolean
    default: true

  results:
    desc: Model do componente, usado para o v-model dos itens da coluna.
    default: {}
    type: Object
    examples: [v-model:results="resultsColumns"]
    model: true

  sortable-config:
    desc: Configuracao passada para a instacia do SortableJS.
    type: Object
    default: "{ animation: 500, swapThreshold: 1, delay: 50, delayOnTouchOnly: true, emptyInsertThreshold: 0 }"
    debugger: true


  use-drag-and-drop-x:
    desc: Controla se ira ter drag and drop no eixo X (Entre colunas).
    type: Boolean

  use-drag-and-drop-y:
    desc: Controla se ira ter drag and drop no eixo Y (Mesma coluna, utilizado para ordencao de itens).
    type: Boolean

  update-position-url:
    desc: URL usada para realizar o PATCH do drag and drop.,
    type: String,
    default: ''

  update-position-params:
    desc: Parâmetros customizados caso precise passar para a API de PATCH.
    type: Object,
    default: {}

slots:
  header-column:
    desc: Slot para acessar o card do header de cada coluna.
    scope:
      fields:
        desc: Fields referente à coluna atual do template.
        type: Object
        default: {}

      header:
        desc: Informações de cada item do header que foi fornecido através da prop "headers"
        type: Object
        default: {}

  column-item:
    desc: Slot para acessar o item da coluna.
    scope:
      fields:
        desc: Fields referente à coluna atual do template.
        type: Object
        default: {}

      item:
        desc: Informações de cada item da coluna que foi buscado através da API.
        type: Object
        default: {}

events:
  '@update:results -> function(value)':
    desc: Dispara quando o "results" altera, também usado para v-model.
    params:
      value:
        desc: Novo valor do model.
        type: Object

  '@update:fetch-column-success -> function({ response, header })':
    desc: Dispara quando o "fetchColumn" é executado com sucesso.
    params:
      response:
        desc: Retorno da API.
        type: Object

      header:
        desc: header da coluna atual.
        type: Object

  '@update:fetch-column-error -> function(error)':
    desc: Dispara quando o "fetchColumn" cai em uma exceção.
    params:
      error:
        desc: Retorna todos os dados "cru" respondido na exceção do fetch.
        type: Object

  '@update:fetch-columns-success -> function()':
    desc: Dispara quando todos "fetchColumn" foram executados com sucesso.

  '@update:fetch-columns-error -> function(error)':
    desc: Dispara quando algum "fetchColumn" cai em uma exceção.
    params:
      error:
        desc: Retorna todos os dados "cru" respondido na exceção do fetch.
        type: Object

  '@update-success -> function()':
    desc: Dispara quando o PATCH do drag and drop é com sucesso.


methods:
  'fetchColumns: () => void':
    desc: Busca todas colunas com base nos headers fornecidos.

  'fetchColumn: (header) => void':
    desc: Busca uma coluna especifica com base no header fornecido.
