type: component

meta:
  desc: Componente para gerar dinamicamente campos nested.

props:
  actions-menu-props:
    desc: Repassa as propriedades para o componente QasActionsMenu. É possível passar um objeto com as propriedades ou uma função que recebe o 'index', 'row' e 'list' como parâmetro e retorna um objeto com as propriedades.
    default: {}
    type: [Object, Function]

  add-first-input-label:
    desc: Rótulo do input para adicionar o primeiro campo.
    default: Clique aqui para adicionar
    type: String

  add-input-label:
    desc: Rótulo do input de adicionar novos campos.
    default: Adicionar
    type: String

  button-destroy-props:
    desc: Props do botão de excluir linha contendo os campos.
    default: "{ label: 'Excluir', icon: 'sym_r_delete', flat: true, dense: true }"
    debugger: true
    type: Object

  button-duplicate-props:
    desc: Props do botão de duplicar linha contendo os campos.
    default: "{ label: 'Duplicar', sym_r_content_copy, flat: true, dense: true, useLabelOnSmallScreen: false }"
    debugger: true
    type: Object

  destroy-key:
    desc: Quando excluímos uma "row" e propriedade "useRemoveOnDestroy" for "false", adicionamos uma propriedade para saber que é para ser deletada, com esta prop você escolhe como se chamará essa chave.
    default: destroyed
    type: String

  disabled-rows:
    desc: Com esta propriedade é possível desabilitar rows (linhas) especificas passando um array com chaves identificadoras, caso queira desativar todas passe um valor boolean "true", ou também é possível utilizar uma função de callback, que receberá a "row" como parâmetro. (Isto vai remover todos os botões da linha, como por exemplo, o duplicar e excluir).
    default: "false"
    type: [Array, Boolean, Function]
    examples: ["['my-uuid-from-row-1']", true, "row => row.disable"]

  errors:
    desc: Propriedade de erros para mostrar nos campos gerados.
    default: {}
    type: [Array, Object]

  field:
    desc: Field contendo informações necessárias para a criação do campo correspondente.
    default: {}
    required: true
    type: Object
    examples: ["{ name: 'meuNested', type: 'nested', label: 'Campo nested', children: [...] }"]

  fields-handler-fn:
    desc: Função para controlar a visibilidade dos campos do formulário para cada linha do nested.
    type: Function
    examples: ["({ fields, index, row }) => fields"]

  fields-props:
    desc: Propriedade para repassar propriedades para cada campo individualmente. Ao utilizar uma função de callback, você recebe como parâmetro o "index" e "row" de cada linha do nested.
    default: {}
    type: [Object, Function]
    examples: [
      "{ name: { dense: true, onClick: () => alert('Estou sendo clicado') } }",
      "({ index, row }) => ({ name: { disable: !row.status })"
    ]

  form-columns:
    desc: Colunas do grid de cada campo.
    default: col-6
    type: [Array, String, Object]
    examples: ["[{ sm: 6, md: 12 }]", "{ name: { sm: 6, md: 12 } }", "12"]

  form-gutter:
    desc: Espaçamento entre cada campo.
    default: md
    type: String
    examples: [xs, sm, md, lg, xl]

  identifier-item-key:
    desc: Define um identificador para o item. O identificador será utilizado para validar exclusão do item, por exemplo.
    default: uuid
    type: String
    examples: [id, uuid, slug]

  model-value:
    desc: Model do componente
    default: []
    type: Array
    examples: [v-model="value"]
    model: true

  row-label:
    desc: Rótulo entre cada linha.
    type: String

  row-object:
    desc: Objeto contendo valores iniciais do model de cada linha.
    default: {}
    type: Object
    examples: ["{ name: '', cities: [] }"]

  use-add:
    desc: Controla quando vai ter seção de "adicionar" novas linhas.
    default: true
    type: Boolean

  use-animation:
    desc: Controla a animação na hora de setar o scroll.
    default: true
    type: Boolean

  use-destroy-always:
    desc: Controla o botão de remover em todas linhas, incluindo a primeira.
    type: Boolean

  use-duplicate:
    desc: Controla o botão de duplicar linha.
    default: true
    type: Boolean

  use-first-input-button:
    desc: Controla se vai ter um botão diferente para adicionar o primeiro campo.
    default: true
    type: Boolean

  use-index-label:
    desc: Se tiver "rowLabel" esta prop controla se cada label da linha vai ter o index como sufixo.
    type: Boolean

  use-inline-actions:
    desc: Controla o comportamento referente aos estilos das ações de duplicar/adicionar/remover.
    type: Boolean

  use-single-label:
    desc: Exibe apenas uma label referente a todas linhas, e não uma por linha.
    type: Boolean

  use-remove-on-destroy:
    desc: O valor do model será removido senão será adicionar uma flag como `destroyed` por exemplo.
    default: true
    type: Boolean

  use-starts-empty:
    desc: O componente iniciará sem nenhuma linha.
    default: true
    type: Boolean

slots:
  add-input:
    desc: Slot para acessar campo de adicionar.
    scope:
      'add -> function(row)':
        desc: Função para adicionar novos campos no model.
        type: Function
        examples: ["add({ name: 'novo valor' })"]

  before-fields:
    desc: Slot para adicionar conteúdo antes dos campos do formulário.
    scope:
      errors:
        desc: Erros dos campos.
        type: Object

      fields:
        desc: Campos atuais.
        type: Object

      index:
        desc: Index atual dos campos.
        type: Number

      model:
        desc: Model da linha atual.
        type: Object

      'updateValue -> function(value, index)':
        desc: Função para atualizar o model, passando o novo valor e o index.
        type: Function
        examples: ["updateValue({ name: 'novo valor' }, 2)"]

  after-fields:
    desc: Slot para adicionar conteúdo após os campos do formulário.
    scope:
      errors:
        desc: Erros dos campos.
        type: Object

      fields:
        desc: Campos atuais.
        type: Object

      index:
        desc: Index atual dos campos.
        type: Number

      model:
        desc: Model da linha atual.
        type: Object

      'updateValue -> function(value, index)':
        desc: Função para atualizar o model, passando o novo valor e o index.
        type: Function
        examples: ["updateValue({ name: 'novo valor' }, 2)"]

  fields:
    desc: Substitui o "QasFormGenerator".
    scope:
      fields:
        desc: Campos atuais.
        type: Object

      index:
        desc: Index atual dos campos.
        type: Number

      errors:
        desc: Erros dos campos.
        type: Object

      'updateValue -> function(value, index)':
        desc: Função para atualizar o model, passando o novo valor e o index.
        type: Function
        examples: ["updateValue({ name: 'novo valor' }, 2)"]

  'field-[nome-da-chave]':
    desc: Repassa todos os slots e escopos do "QasFormGenerator".
    scope:
      disabled:
        desc: Retorna se a linha esta desabilitada
        type: boolean

      index:
        desc: Index atual dos campos
        type: Number

      errors:
        desc: Erros dos campos
        type: Object

      'updateValue -> function(value, index)':
        desc: Função para atualizar o model, passando o novo valor e o index.
        type: Function
        examples: ["updateValue({ name: 'novo valor' }, 2)"]


events:
  '@update:model-value -> function (value)':
    desc: Dispara toda vez que o model é atualizado, também utilizado para v-model.
    params:
      value:
        desc: Novo valor do v-model
        type: String
