type: component

meta:
  desc: Componente para C.R.U.D. responsável pela pela criação (Create) e edição (Update).

props:
  cancel-button:
    desc: Rótulo do botão "cancelar".
    default: Cancelar
    type: String

  cancel-route:
    desc: Configuração do botão de "cancelar", caso seja "false", não exibe o botão, caso precise passar uma path direto use como string, e se precisar passar uma configuração como "name" ou "params" passe como objeto.
    default: "''"
    type: [Boolean, Object, String]
    examples: [/users, "false", "{ name: 'UsersForm', params: { id: 'uuid-1' } }"]

  custom-id:
    desc: Por padrão, o componente vai pegar o "id" que vem como parâmetro na url, caso queira que o id seja diferente da url, use esta prop.
    type: String
    examples: ['my-custom-id']

  disable:
    desc: Desabilita o submit.
    type: Boolean

  mode:
    desc: Existem 3 modos no QasFormView, para criação (create) (equivalente a um metodo POST no http), e edição que são 2 diferentes, replace (equivalente a um metodo PUT no http) e update (equivalente a um metodo PATCH no http).
    default: create
    type: String
    examples: [create, replace, update]

  read-only:
    desc: Controla o slot de actions.
    type: Boolean

  route:
    desc: Você pode passar uma configuração de rota customizada.
    default: {}
    type: Object

  show-dialog-on-unsaved-changes:
    desc: Vamos imaginar um cenário onde o usuário entra na nossa tela de editar/criar, faz tudo o que precisa e sem querer clica no menu para ir para outra tela, caso essa prop esteja "true", vai aparece um modal perguntando se ele quer continuar editando ou ir para a tela no qual foi inicialmente redirecionado.
    default: true
    type: Boolean

  ignore-keys-in-unsaved-changes:
    desc: Vamos imaginar um cenário onde você precisa alterar valores do v-model por qualquer motivo que seja, mas quando o usuário sair da tela, não pode aparecer o modal perguntando se ele quer sair ou continuar editando, por que o usuário de fato não fez nenhuma alteração nos dados, esta prop serve para você dizer quais keys dentro do v-model você quer ignorar.
    default: []
    type: Array
    examples: ["['isActive']"]

  submit-button:
    desc: Rótulo do botão "salvar".
    default: Salvar
    type: String

  model-value:
    desc: Model do componente, controla o payload que será enviado para as actions dos modos create, replace e update.
    default: {}
    type: Object
    examples: [v-model="values"]
    model: true

  submiting:
    desc: Model que que mostra quando o componente está fazendo um submiting ou não.
    type: Boolean
    examples: [v-model:submiting="isSubmiting"]
    model: true

  entity:
    desc: Entidade da store, por exemplo se tiver que trabalhar com modulo de usuários, teremos o model "users" na store, que vai ser nossa "entity".
    required: true
    type: String

  dialog:
    desc: Este componente pode ser utilizado dentro de um dialog, neste caso o componente pai não pode ser um "QPage" e sim uma "div", esta prop cuida disto.
    type: Boolean

  url:
    desc: Envia como parâmetro para a action "fetchSingle" do modulo correspondente a "entity".
    type: String

  fields:
    desc: Model de fields, utilizado para recuperar os fields fora do template.
    default: {}
    type: Object
    examples: [v-model:fields="fields"]
    model: true

  errors:
    desc: Model de errors, utilizado para recuperar os errors fora do template.
    default: {}
    type: Object
    examples: [v-model:errors="errors"]
    model: true

  metadata:
    desc: Model de metadata, utilizado para recuperar os metadata fora do template.
    default: {}
    type: Object
    examples: [v-model:metadata="metadata"]
    model: true

  fetching:
    desc: Model de fetching, utilizado para saber se o componente está fazendo fetching de dados.
    type: Boolean
    examples: [v-model:fetching="isFetching"]
    model: true

slots:
  header:
    desc: Slot para acessar o header.

  default:
    desc: Slot para ter o conteúdo principal (dentro do main).

  actions:
    desc: Slot para acessar a seção onde ficam os botões de ações (salvar e cancelar).

  footer:
    desc: Slot para acessar o footer.

events:
  '@update:model-value -> function(value)':
    desc: Dispara toda vez que o model atualiza.
    params:
      value:
        desc: usado para v-model.
        type: Object

  '@update:submiting -> function(value)':
    desc: Dispara logo antes da action do modo "replace" ou "update" e ao cair no bloco "finally", ou seja, quando começar o submeter e após terminar.
    params:
      value:
        desc: Retorna se está ou não submetendo os dados.
        type: Boolean

  '@update:fields -> function(value)':
    desc: Dispara quando a action "fetchSingle" é executada com sucesso, é chamado antes do evento "fetch-success".
    params:
      value:
        desc: fields.
        type: Object

  '@update:errors -> function(value)':
    desc: Dispara quando a action "fetchSingle" é chamada.
    params:
      value:
        desc: Errors durante o fetch.
        type: Object

  '@update:metadata -> function(value)':
    desc: Dispara quando a action "fetchSingle" acontece com sucesso, é chamado antes do evento "fetch-success".
    params:
      value:
        desc: metadata.
        type: Object

  '@update:fetching -> function(value)':
    desc: Dispara logo antes da action "fetchSingle" e ao cair no bloco "finally", ou seja, quando começar o fetching e após terminar.
    params:
      value:
        desc: Retorna se está ou não fazendo fetching de dados.
        type: Boolean

  '@fetch-success -> function(value)':
    desc: Dispara quando a action "fetchSingle" é executada com sucesso.
    params:
      value:
        desc: Retorna todos os dados "cru" respondido pelo fetch.
        type: Object

  '@fetch-error -> function(value)':
    desc: Dispara quando a action "fetchSingle" cai em uma exceção.
    params:
      value:
        desc: Retorna todos os dados "cru" respondido na exceção do fetch.
        type: Object
