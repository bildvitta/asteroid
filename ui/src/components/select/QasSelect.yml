type: component

mixins:
  - quasar/dist/api/QSelect.json

meta:
  desc: Componente para select que implementa o "QSelect" repassando propriedades, slots e eventos.

props:
  entity:
    desc: Entidade enviada para a action "fetchFieldOptions" (usar somente quando "useLazyLoading" estiver habilitada).
    default: ''
    type: String
    examples: [users]

  fetching:
    desc: Usado para saber quando o componente está fazendo fetching (usar somente quando "useLazyLoading" estiver habilitada).
    default: false
    type: Boolean
    model: true
    examples: [v-model:fetching="isFetching"]

  fuse-options:
    desc: Opções do Fuse.js (https://fusejs.io/api/options.html).
    type: Object
    debugger: true
    default:
      ignoreLocation: true
      keys: [label, value]
      threshold: 0.4

  label:
    desc: Label do componente.
    type: String
    default: ''

  label-key:
    desc: O componente internamente espera receber na propriedade "options" um array de objeto contendo "label" e "value", caso o seu objeto não tenha "label" mas um "name" por exemplo, você pode definir esta prop "label-key" como "name".
    type: String
    examples: [label-key="name"]

  lazy-loading-props:
    desc: Propriedades para o lazy loading (usar somente quando "useLazyLoading" estiver habilitada).
    type: Object
    debugger: true
    default:
      decamelizeFieldName: true
      url: ''
      params:
        limit: 48

  model-value:
    desc: Model do componente.
    default: []
    type: [Array, Object, String, Number, Boolean]
    examples: [v-model="value"]
    model: true

  name:
    desc: Nome do campo a ser enviado para a action "fetchFieldOptions" (usar somente quando "useLazyLoading" estiver habilitada).
    type: String
    examples: [cities]

  no-option-label:
    desc: Rótulo padrão de quando os options estão vazios.
    default: Nenhum resultado foi encontrado.
    type: String

  options:
    desc: Opções do select.
    default: []
    type: Array

  required:
    desc: Controla label do campo, se for "true" adiciona sufixo "*".
    default: false
    type: Boolean

  value-key:
    desc: O componente internamente espera receber na propriedade "options" um array de objeto contendo "label" e "value", caso o seu objeto não tenha "value" mas um "uuid" por exemplo, você pode definir esta prop "label-value" como "uuid".
    type: String
    examples: [value-key="uuid"]

  use-fetch-options-on-create:
    desc: Controla se o componente vai fazer um fetch das opções assim que o mesmo é criado (caso tenha lazy loading ativado).
    default: true
    type: Boolean

  use-search:
    desc: Controla se vai ou não ter campo de busca no select.
    default: undefined
    type: Boolean

  use-lazy-loading:
    desc: Controla a busca pela store "fetchFieldOptions".
    default: false
    type: Boolean

events:
  '@update:model-value -> function (value)':
    desc: Dispara toda vez que o model é atualizado, também utilizado para v-model.
    params:
      value:
        desc: Novo valor do v-model
        type: [Array, Object, String, Number, Boolean]

  '@update:fetching -> function (value)':
    desc: Dispara toda vez que o campo de busca faz o fetch do lazy loading
    params:
      value:
        desc: Novo valor do v-model:fetching
        default: false
        type: Boolean

  '@fetch-options-success -> function (value)':
    desc: Dispara toda vez que o campo de busca faz o fetch do lazy loading com sucesso.
    params:
      value:
        desc: Valor retornado pela action "fetchFieldOptions"
        default: {}
        type: Object

  '@fetch-options-error -> function (value)':
    desc: Dispara toda vez que o campo de busca faz o fetch do lazy loading e cai em uma exceção.
    params:
      value:
        desc: Valor retornado pela action "fetchFieldOptions"
        default: {}
        type: Object
