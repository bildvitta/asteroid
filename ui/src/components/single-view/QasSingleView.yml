type: component

meta:
  desc: Componente para C.R.U.D. responsável pela visualização (Read) ou conhecido também como "show".

props:
  custom-id:
    desc: Por padrão, o componente vai pegar o "id" que vem como parâmetro na url, caso queira que o id seja diferente da url, use esta prop.
    type: String
    examples: ['my-custom-id']

  dialog:
    desc: Este componente pode ser utilizado dentro de um dialog, neste caso o componente pai não pode ser um "QPage" e sim uma "div", esta prop cuida disto.
    type: Boolean

  entity:
    desc: Entidade da store, por exemplo se tiver que trabalhar com modulo de usuários, teremos o model "users" na store, que vai ser nossa "entity".
    required: true
    type: String

  errors:
    model: true
    desc: Model de errors, utilizado para recuperar os errors fora do template.
    default: {}
    type: Object
    examples: [v-model:errors="errors"]

  fields:
    model: true
    desc: Model de fields, utilizado para recuperar os fields fora do template.
    default: {}
    type: Object
    examples: [v-model:fields="fields"]

  fetching:
    model: true
    desc: Model de fetching, utilizado para saber se o componente está fazendo fetching de dados.
    type: Boolean
    examples: [v-model:fetching="isFetching"]

  metadata:
    model: true
    desc: Model de metadata, utilizado para recuperar os metadata fora do template.
    default: {}
    type: Object
    examples: [v-model:metadata="metadata"]

  result:
    model: true
    desc: Model de result, utilizado para recuperar o resultado retornado pelo componente.
    type: Object
    examples: [v-model:result="result"]

  url:
    desc: Envia como parâmetro para a action "fetchSingle" do modulo correspondente a "entity".
    type: String

slots:
  default:
    desc: 'Slot para ter o conteúdo principal (dentro do main).'

  footer:
    desc: 'Slot para acessar o footer.'

  header:
    desc: 'Slot para acessar o header.'

events:
  '@fetch-success -> function(value)':
    desc: Dispara quando a action "fetchSingle" é executada com sucesso.
    params:
      value:
        desc: Retorna todos os dados "cru" respondido pelo fetch.
        type: Object

  '@fetch-error -> function(value)':
    desc: Dispara quando a action "fetchSingle" cai em uma exceção.
    params:
      value:
        desc: Retorna todos os dados "cru" respondido na exceção do fetch.
        type: Object

  '@update:result -> function(value)':
    desc: Dispara quando a action "fetchSingle" é executada com sucesso, é chamado antes do evento "fetch-success".
    params:
      value:
        desc: lista retornada no "fetchSingle".
        type: Array

  '@update:fields -> function(value)':
    desc: Dispara quando a action "fetchSingle" é executada com sucesso, é chamado antes do evento "fetch-success".
    params:
      value:
        desc: fields.
        type: Object

  '@update:errors -> function(value)':
    desc: Dispara quando a action "fetchSingle" é chamada.
    params:
      value:
        desc: Errors durante o fetch.
        type: Object

  '@update:metadata -> function(value)':
    desc: Dispara quando a action "fetchSingle" acontece com sucesso, é chamado antes do evento "fetch-success".
    params:
      value:
        desc: metadata.
        type: Object

  '@update:fetching -> function(value)':
    desc: Dispara logo antes da action "fetchSingle" e ao cair no bloco "finally", ou seja, quando começar o fetching e após terminar.
    params:
      value:
        desc: Retorna se está ou não fazendo fetching de dados.
        type: Boolean
